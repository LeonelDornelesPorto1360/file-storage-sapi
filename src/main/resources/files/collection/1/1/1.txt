"Abastece AI:\r\n\r\n\tTrabalho com as seguintes tecnologias e arquiteturas:\r\n\t\t- Mulesoft 3.8 (On Prem)\r\n\t\t- Especificação em RAML\r\n\t\t- Criação e manutenção de APIs\r\n\t\t- Testes Unitários usando JUNIT\r\n\t\t- Mocks de teste com Mountebank\r\n\t\t- Arquitetura de uma camada (Não recomendado)\r\n  \t\t- Dataweave 1.0\r\n\t\t- Tratamento de erros no mule 3 nnão ajudava muito na identificação da natureza dos erros, pois ainda era muito atrelado ao Java.\r\n\t\t- Muitos componentes como: JSON TO OBJECT, XML TO JSON substituidos pelo Transform Message usando Dataweave 2.0.\r\n\t\t- Integrações com sistema legado\r\n\t\t- Não utilizava o Runtime Plane, somente o Control plane para publicação das apis no exchange e sem o gerenciamento do api manager\r\n\t\t\r\n\t\t- GITLAB e Metodologias ageis (Scrum e kanban)\r\n\t\t- Esteira DEVOPS CI/CD\r\n\t\t- Aprovação lider técnico (Hugo)\r\n\t\t- Branchs (dev, qa e prod)\r\n\t\t- Era aberto GMUD para subida em produção\r\n\r\nVivo, Alpargatas e Vicunha:\r\n\r\n\tTrabalho com as seguintes tecnologias e arquiteturas:\r\n\t\t- Mulesoft (Cloudhub)\r\n\t\t- Especificação em RAML (Design First) para depois a implementação\r\n\t\t- Criação e manutenção de APIs\r\n\t\t- Testes Unitários usando MUNIT\r\n\t\t- Arquitetura de três camadas (eapi, papi e sapi) -> API LED\r\n  \t\t- REST e SOAP\r\n\t\t- API Manager para o gerenciamento das instâncias no cloudhub\r\n\t\t- Anypoint MQ no cliente Alpargatas\r\n\t\t- Ambos clientes, utilizavam o control plane e o runtime plane\r\n\t\t- Shared Loadbalance (PAPI e SAPI trabalham dentro da rede interna VPC do mulesoft, somente a EAPI exposta)\r\n\t\t\r\n\t\t- GITLAB e Metodologias ageis (Scrum e kanban)\r\n\t\t- Branchs (dev, qa e prod)\r\n\t\t- Integação com Salesforce (Service Cloud, Sales Cloud e Marketing cloud na vivo, para lançar campanhas por SMS)"